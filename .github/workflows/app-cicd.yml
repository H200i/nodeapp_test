# use github.sha as a tag 
# use oidc role instead of secrets
# use gradle
# save java artifact and use it in dockerfile


name: App-CICD

on:
  push:
    branches:
     - master
    paths:
     - 'test/**'
     
permissions:
   id-token: write
   contents: read
   
jobs:

  CICD:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checkout your respository
      - name: Checkout 
        uses: actions/checkout@v3
     
      # Build the code
      - name: Build Code
        run: npm install
    
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # AWS Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      # Build, tag, and push the image to Amazon ECR
      - name: Build, tag, and push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ideabank
          # IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG: latest
        run: |
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     
       # Update kube config
      - name: EKS Cluster Authentication
        run: aws eks update-kubeconfig --name idea-bank --region eu-central-1

       # Deploy image to Amazon EKS
      - name: Deploy image to Amazon EKS
        run: |
            kubectl apply -f eks/deployment.yaml
            kubectl apply -f eks/service.yaml
            
   
          
          
          






